import express from 'express'

import { storyController } from '@/controllers/story-controller'
import { ensureUserIsAuthenticated, getUserCredentials } from '@/middlewares/authentication'
import { validator } from '@/middlewares/validator'
import {
  createStoryReqSchema,
  deleteStoryByIdReqSchema,
  dislikeStoryReqSchema,
  getStoriesPreviewsReqSchema,
  getStoryByIdReqSchema,
  getStoryPreviewByIdReqSchema,
  getStoryUsingShareTokenReqSchema,
  likeStoryReqSchema,
  shareStoryReqSchema,
  updateStoryReqSchema,
  viewStoryReqSchema,
} from '@/validators/story-validator'

const router = express.Router()

/**
 * @swagger
 * /v1/story/{id}/share:
 *  post:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Generates a share token for a private story
 *    description: Generates a share token for a private story, needs to be authenticated with the owner of the story
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to be shared
 *        schema:
 *          type: string
 */
router.post('/share', ensureUserIsAuthenticated, validator(shareStoryReqSchema), storyController.shareStory)

/**
 * @swagger
 * /v1/story/shared:
 *  get:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Gets a private story using a share token
 *    description: Gets a private story using a share token, this route does not require authentication
 *    parameters:
 *      - in: query
 *        name: shareToken
 *        required: true
 *        description: Token generated by share route
 *        schema:
 *          type: string
 */
router.get(
  '/shared',
  getUserCredentials,
  validator(getStoryUsingShareTokenReqSchema),
  storyController.getStoryUsingShareToken,
)

/**
 * @swagger
 * /v1/story/{id}:
 *  get:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Get a story by id
 *    description: Get a story by id, needs authentication if the story is private
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to be retrieved
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns a story
 */
router.get('/:id', getUserCredentials, validator(getStoryByIdReqSchema), storyController.getStoryById)

/**
 * @swagger
 * /v1/story/{id}/preview:
 *  get:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Get a story preview by id
 *    description: Get a story preview by id, needs authentication if the story is private
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to be retrieved
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns story's preview
 */
router.get(
  '/:id/preview',
  getUserCredentials,
  validator(getStoryPreviewByIdReqSchema),
  storyController.getStoryPreviewById,
)

/**
 * @swagger
 * /v1/story/public/preview:
 *  get:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Get a list of stories previews
 *    description: Get a list of stories previews, if no userId is provided, it will return all public stories previews, otherwise it will return all public stories previews from the provided userId, and also the private if userId is the same as the authenticated user
 *    parameters:
 *      - in: query
 *        name: userId
 *        required: false
 *        description: Id of the user to get the stories from
 *        schema:
 *          type: string
 *      - in: query
 *        name: skip
 *        required: false
 *        description: Number of stories to skip
 *        schema:
 *          type: integer
 *      - in: query
 *        name: limit
 *        required: false
 *        description: Number of stories to take
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns a list of public stories previews
 */
router.get(
  '/public/preview',
  getUserCredentials,
  validator(getStoriesPreviewsReqSchema),
  storyController.getStoriesPreviews,
)

/**
 * @swagger
 * /v1/story:
 *  post:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Creates a new story
 *    description: Creates a new story, needs authentication
 *    requestBody:
 *      description: Story to be created
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/info/components/schemas/NewStory'
 *    responses:
 *      200:
 *        description: Returns the id of the created story
 */
router.post('/', ensureUserIsAuthenticated, validator(createStoryReqSchema), storyController.createStory)

/**
 * @swagger
 * /v1/story/{id}:
 *  put:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Updates a story
 *    description: Updates a story, needs to be authenticated with the owner of the story
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to be updated
 *        schema:
 *          type: integer
 *    requestBody:
 *      description: Story to be updated
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/info/components/schemas/NewStory'
 *    responses:
 *      200:
 *        description: Returns the id of the updated story
 */
router.put('/:id', ensureUserIsAuthenticated, validator(updateStoryReqSchema), storyController.updateStory)

/**
 * @swagger
 * /v1/story/{id}:
 *  delete:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Deletes a story
 *    description: Deletes a story, needs to be authenticated with the owner of the story
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to be deleted
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns the id of the deleted story
 */
router.delete('/:id', ensureUserIsAuthenticated, validator(deleteStoryByIdReqSchema), storyController.deleteStoryById)

/**
 * @swagger
 * /v1/story/{id}/like:
 *  post:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Adds a like to a story
 *    description: Add a like to a story, needs to be authenticated
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to add a like to
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns a success message
 */
router.post('/:id/like', ensureUserIsAuthenticated, validator(likeStoryReqSchema), storyController.likeStory)

/**
 * @swagger
 * /v1/story/{id}/dislike:
 *  post:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Removes a like from a story
 *    description: Removes a like from a story, needs to be authenticated
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to remove a like from
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns a success message
 */
router.post('/:id/dislike', ensureUserIsAuthenticated, validator(dislikeStoryReqSchema), storyController.dislikeStory)

/**
 * @swagger
 * /v1/story/{id}/view:
 *  post:
 *    tags:
 *      - story
 *    security:
 *      - cookieAuth: []
 *    summary: Add a view to a story
 *    description: Add a view to a story, does not require authentication
 *    parameters:
 *      - in: path
 *        name: id
 *        required: true
 *        description: Id of the story to add a view to
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Returns a success message
 */
router.post('/:id/view', ensureUserIsAuthenticated, validator(viewStoryReqSchema), storyController.viewStory)

export { router as storyRouter }
