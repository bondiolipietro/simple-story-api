import express from 'express'

const router = express.Router()

/**
 * @swagger
 * /v1/story/{id}/share:
 *   post:
 *     tags:
 *       - story
 *     summary: Genetares a share token for a private story
 *     description: Generates a share token for a private story, needs to be authenticated with the owner of the story
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to be shared
 *         schema:
 *           type: integer
 */
router.post('/share', (req, res) => {
  res.send('get /shared')
})

/**
 * @swagger
 * /v1/story/shared:
 *   get:
 *     tags:
 *       - story
 *     summary: Gets a private story using a share token
 *     description: Gets a private story using a share token, this route does not require authentication
 *     parameters:
 *       - in: query
 *         name: shareToken
 *         required: true
 *         description: Token generated by share route
 *         schema:
 *           type: string
 */
router.get('/shared', (req, res) => {
  res.send('get /shared')
})

/**
 * @swagger
 * /v1/story/{id}:
 *   get:
 *     tags:
 *       - story
 *     summary: Get a story by id
 *     description: Get a story by id, needs authentication if the story is private
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to be retrieved
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a story
 */
router.get('/:id', (req, res) => {
  res.send('get /:id')
})

/**
 * @swagger
 * /v1/story/{id}/preview:
 *   get:
 *     tags:
 *       - story
 *     summary: Get a story preview by id
 *     description: Get a story preview by id, needs authentication if the story is private
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to be retrieved
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns story's preview
 */
router.get('/:id/preview', (req, res) => {
  res.send('get /:id/preview')
})

/**
 * @swagger
 * /v1/story/public/preview:
 *   get:
 *     tags:
 *       - story
 *     summary: Get all public stories previews
 *     description: Get all public stories previews, does not require authentication, returns the first 100 stories
 *     parameters:
 *       - in: query
 *         name: skip
 *         required: false
 *         description: Number of stories to skip
 *         schema:
 *           type: integer
 *       - in: query
 *         name: take
 *         required: false
 *         description: Number of stories to take
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a list of public stories previews
 */
router.get('/public/preview', (req, res) => {
  res.send('get /public/preview')
})

/**
 * @swagger
 * /v1/story/preview:
 *   get:
 *     tags:
 *       - story
 *     summary: Get all public stories previews from a user
 *     description: Get all stories previews from a user, if the user is the authenticated user, private stories will be included, otherwise only public stories will be returned
 *     parameters:
 *       - in: query
 *         name: userId
 *         required: true
 *         description: Id of the user to retrieve stories from
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a list of public stories previews from a user
 */
router.get('/preview', (req, res) => {
  res.send('get /preview')
})

/**
 * @swagger
 * /v1/story:
 *   post:
 *     tags:
 *       - story
 *     summary: Creates a new story
 *     description: Creates a new story, needs authentication
 *     requestBody:
 *       description: Story to be created
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Returns the id of the created story
 */
router.post('/', (req, res) => {
  res.send('post /')
})

/**
 * @swagger
 * /v1/story/{id}:
 *   put:
 *     tags:
 *       - story
 *     summary: Updates a story
 *     description: Updates a story, needs to be authenticated with the owner of the story
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to be updated
 *         schema:
 *           type: integer
 *     requestBody:
 *       description: Story to be updated
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Returns the id of the updated story
 */
router.put('/:id', (req, res) => {
  res.send('put /:id')
})

/**
 * @swagger
 * /v1/story/{id}:
 *   delete:
 *     tags:
 *       - story
 *     summary: Deletes a story
 *     description: Deletes a story, needs to be authenticated with the owner of the story
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to be deleted
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns the id of the deleted story
 */
router.delete('/:id', (req, res) => {
  res.send('delete /:id')
})

/**
 * @swagger
 * /v1/story/{id}/likes:
 *   get:
 *     tags:
 *       - story
 *     summary: Gets all likes from a story
 *     description: Gets all likes from a story, needs to be authenticated if the story is private
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to get likes from
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a list of previews of users  that liked the story
 */
router.get('/:id/likes', (req, res) => {
  res.send('get /:id/likes')
})

/**
 * @swagger
 * /v1/story/{id}/like:
 *   post:
 *     tags:
 *       - story
 *     summary: Adds a like to a story
 *     description: Add a like to a story, needs to be authenticated
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to add a like to
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a success message
 */
router.post('/:id/like', (req, res) => {
  res.send('post /:id/like')
})

/**
 * @swagger
 * /v1/story/{id}/dislike:
 *   post:
 *     tags:
 *       - story
 *     summary: Removes a like from a story
 *     description: Removes a like from a story, needs to be authenticated
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to remove a like from
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a success message
 */
router.post('/:id/dislike', (req, res) => {
  res.send('post /:id/dislike')
})

/**
 * @swagger
 * /v1/story/{id}/view:
 *   post:
 *     tags:
 *       - story
 *     summary: Add a view to a story
 *     description: Add a view to a story, does not require authentication
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Id of the story to add a view to
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Returns a success message
 */
router.post('/:id/view', (req, res) => {
  res.send('post /:id/view')
})

export default router
